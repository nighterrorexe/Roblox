local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
local RaidPortals = workspace.__THINGS.__INSTANCE_CONTAINER.Active.LuckyEventWorld.INTERACT.RaidPortals
local selectedPortal = nil

-- Get raid level from the UI text
local raidLevelText = player.PlayerGui.RaidSide.Frame.Top.Title.Text
local raidLevel = tonumber(string.match(raidLevelText, "%d+")) -- Extract the number

-- Check for an owned portal first
for i = 1, 10 do
    local portal = RaidPortals:FindFirstChild(tostring(i))
    if portal then
        local title = portal.Billboard.BillboardGui.Title.Text
        if title == player.Name .. "'s Raid" then
            selectedPortal = portal
            break
        end
    end
end

-- If no owned portal is found, find the first free portal
if not selectedPortal then
    for i = 1, 10 do
        local portal = RaidPortals:FindFirstChild(tostring(i))
        if portal then
            local enterPart = portal:FindFirstChild("Enter")
            if enterPart and enterPart.Color == Color3.fromRGB(65, 65, 65) then
                selectedPortal = portal
                break
            end
        end
    end
end

-- If a valid portal is found, proceed
if selectedPortal and humanoidRootPart then
    local pad = selectedPortal:FindFirstChild("Pad")
    local enterPart = selectedPortal:FindFirstChild("Enter")

    -- Move the player to the Pad first
    if pad then
        humanoidRootPart.CFrame = pad.CFrame
        task.wait(1) -- Small delay to ensure movement
    end

    -- Wait 2 seconds before firing the remote event
    task.wait(2)

    -- Fire the remote event to create the raid
    local args = {
        [1] = {
            ["Difficulty"] = raidLevel,
            ["Portal"] = selectedPortal,
            ["PartyMode"] = 1
        }
    }
    ReplicatedStorage:WaitForChild("Network"):WaitForChild("Raids_RequestCreate"):InvokeServer(unpack(args))

    -- Move the player to the Enter part
    if enterPart then
        humanoidRootPart.CFrame = enterPart.CFrame
    end
end
