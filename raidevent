local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local RaidPortals = Workspace.__THINGS.__INSTANCE_CONTAINER.Active.LuckyEventWorld.INTERACT.RaidPortals

-- Helper function to get the raid difficulty from the player's leaderstats.
local function getRaidDifficulty()
    local leaderstats = player:FindFirstChild("leaderstats")
    if leaderstats then
        local raidLvl = leaderstats:FindFirstChild("⚔️ Raid Lvl")
        if raidLvl then
            return raidLvl.Value
        else
            warn("⚔️ Raid Lvl not found in leaderstats! Defaulting to 1")
            return 1
        end
    else
        warn("leaderstats not found! Defaulting difficulty to 1")
        return 1
    end
end

-- Function to scan all portals (1 to 10) and return:
--   • The player's owned portal (if found), or
--   • The first portal that is free (its Enter part is Color3.fromRGB(65,65,65))
local function findValidPortal()
    local freePortal = nil
    for i = 1, 10 do
        local portal = RaidPortals:FindFirstChild(tostring(i))
        if portal then
            -- Check if the portal is owned by the player.
            local billboard = portal:FindFirstChild("Billboard")
            if billboard then
                local billboardGui = billboard:FindFirstChild("BillboardGui")
                if billboardGui then
                    local title = billboardGui:FindFirstChild("Title")
                    if title and title:IsA("TextLabel") and title.Text == player.Name .. "'s Raid" then
                        return portal  -- Owned portal found—return immediately.
                    end
                end
            end

            -- Otherwise, check if the portal is free.
            local enterPart = portal:FindFirstChild("Enter")
            if enterPart and enterPart:IsA("BasePart") and enterPart.Color == Color3.fromRGB(65,65,65) then
                if not freePortal then
                    freePortal = portal  -- Save the first free portal.
                end
            end
        end
    end
    return freePortal  -- May be nil if no valid portal exists.
end

-- Function to handle the portal process.
local function handlePortal(portal)
    local enterPart = portal:FindFirstChild("Enter")
    if not enterPart or not enterPart:IsA("BasePart") then
        print("Enter part not found or invalid in portal " .. portal.Name)
        return
    end

    -- Use "Pad" if available; otherwise, default to Enter.
    local padPart = portal:FindFirstChild("Pad") or enterPart

    -- Walk the player to the Pad.
    humanoid:MoveTo(padPart.Position)
    local reachedPad = humanoid.MoveToFinished:Wait()
    if reachedPad then
        print("Player reached pad at portal " .. portal.Name)
        
        -- NOTE: Leaving the LuckyRaidSettings frame as it is.

        -- Fire the remote event to create the raid.
        local args = {
            [1] = {
                Difficulty = getRaidDifficulty(),
                Portal = portal,  -- the selected portal model
                PartyMode = 1
            }
        }
        local remote = ReplicatedStorage:WaitForChild("Network"):WaitForChild("Raids_RequestCreate")
        remote:InvokeServer(unpack(args))
        print("Raids_RequestCreate remote fired for portal " .. portal.Name)

        -- Immediately move the player to the Enter part.
        humanoid:MoveTo(enterPart.Position)
        humanoid.MoveToFinished:Connect(function(reached)
            if reached then
                print("Player reached the Enter part of portal " .. portal.Name)
            else
                print("Player failed to reach the Enter part.")
            end
        end)
        
        -- Optional: One-time Touched event on the Enter part.
        local connection
        connection = enterPart.Touched:Connect(function(hit)
            if hit.Parent == character then
                print("Player touched Enter part.")
                connection:Disconnect()
            end
        end)
    else
        print("Player failed to reach pad at portal " .. portal.Name)
    end
end

-- Main process: check all portals and choose the one that is either owned or free.
local validPortal = findValidPortal()
if validPortal then
    print("Using portal: " .. validPortal.Name)
    handlePortal(validPortal)
else
    print("No valid portal found!")
end
