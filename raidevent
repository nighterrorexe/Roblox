local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local RaidPortals = Workspace.__THINGS.__INSTANCE_CONTAINER.Active.LuckyEventWorld.INTERACT.RaidPortals

-- Look for a portal that the player already owns or the first free one.
local ownedPortal = nil
local freePortal = nil

for i = 1, 10 do
    local portal = RaidPortals:FindFirstChild(tostring(i))
    if portal then
        -- Check if the portal is owned by the player.
        local billboard = portal:FindFirstChild("Billboard")
        if billboard then
            local billboardGui = billboard:FindFirstChild("BillboardGui")
            if billboardGui then
                local title = billboardGui:FindFirstChild("Title")
                if title and title:IsA("TextLabel") and title.Text == player.Name .. "'s Raid" then
                    ownedPortal = portal
                    break  -- Use the owned portal immediately.
                end
            end
        end
        -- Otherwise, check if the portal is free (Enter part's color is 65,65,65).
        local enterPart = portal:FindFirstChild("Enter")
        if enterPart and enterPart:IsA("BasePart") and enterPart.Color == Color3.fromRGB(65, 65, 65) then
            if not freePortal then
                freePortal = portal
            end
        end
    end
end

local chosenPortal = ownedPortal or freePortal

if not chosenPortal then
    print("No valid portal found!")
    return
end

print("Using portal: " .. chosenPortal.Name)

local enterPart = chosenPortal:FindFirstChild("Enter")
if not enterPart or not enterPart:IsA("BasePart") then
    print("Enter part not found in portal " .. chosenPortal.Name)
    return
end

-- Use the "Pad" part if available; otherwise, default to the Enter part's position.
local padPart = chosenPortal:FindFirstChild("Pad") or enterPart

-- Move the player to the pad.
humanoid:MoveTo(padPart.Position)
local reachedPad = humanoid.MoveToFinished:Wait()
if reachedPad then
    print("Player reached pad at portal " .. chosenPortal.Name)
    
    -- Get the raid level directly from leaderstats.
    local raidLvl = 1
    if player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("⚔️ Raid Lvl") then
        raidLvl = player.leaderstats["⚔️ Raid Lvl"].Value
    end

    local args = {
        [1] = {
            Difficulty = raidLvl,
            Portal = chosenPortal,  -- the selected portal model
            PartyMode = 1
        }
    }
    local remote = ReplicatedStorage:WaitForChild("Network"):WaitForChild("Raids_RequestCreate")
    remote:InvokeServer(unpack(args))
    print("Raids_RequestCreate remote fired for portal " .. chosenPortal.Name)

    -- Immediately move the player to the Enter part.
    humanoid:MoveTo(enterPart.Position)
    humanoid.MoveToFinished:Connect(function(reached)
        if reached then
            print("Player reached the Enter part of portal " .. chosenPortal.Name)
        else
            print("Player failed to reach the Enter part.")
        end
    end)
    
    -- Optionally, a one-time Touched event on the Enter part.
    local connection
    connection = enterPart.Touched:Connect(function(hit)
        if hit.Parent == character then
            print("Player touched Enter part.")
            connection:Disconnect()
        end
    end)
else
    print("Player failed to reach pad at portal " .. chosenPortal.Name)
end
